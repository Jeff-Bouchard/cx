package main

func hs(n i32, recycle []i32) (out []i32) {
	out = append(recycle, n)
	for n > 1 {
		if i32.bitand(n,1) == 0 {
			n = i32.div(n, 2)
		} else {
			n = 3*n + 1
		}
		out = append(out, n)
	}
}

func main() {
	var recycle []i32
	seq := hs(27, recycle)

	//str.print("hs(27): " + len(recycle) + " elements: [" + seq[0] + " " + seq[1] + " " + seq[2] + " " + seq[3] + " ... " + seq[len(seq)-4] + " " + seq[len(seq)-3] + " " + seq[len(seq)-2] + " " + seq[len(seq)-1])

	var maxN, maxLen i32
	for n := 1; n < 100000; n++ {
		seq = hs(n, seq)
		if len(seq) > maxLen {
			maxN = n
			maxLen = len(seq)
		}
	}
	//str.print("hs(" + i32.str(maxN) + "): " + i32.str(maxLen) + " elements")
}
